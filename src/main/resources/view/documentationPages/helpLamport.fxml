<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.TextArea?>
<?import javafx.scene.text.Text?>
<?import javafx.scene.text.TextFlow?>

<TextFlow xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1">
    <Text style="-fx-font-size: 2em" text="Lamport's algorithm&#10;" textAlignment="CENTER">
        Lamport's algorithm
    </Text>
    <TextArea editable="false" prefHeight="350.0" prefWidth="275.0" style="-fx-background-insets: 0px; -fx-text-overrun: ellipsis;" text="It is also called the Oral Message (OM) Algorithm. It’s a recursive algorithm, which should last t+1 rounds, where t is the number of traitors. The goal of the algorithm is for the votes of the traitors to be drowned out by the votes of loyal majority.&#10;For the Lamport’s algorithm to work, the number of loyal generals should be at least three times plus one (2t+1) the number of traitors.&#10;&#10;Let OM(m) be our execution, where m is the depth, m&gt;0.&#10;1. The commander sends his opinion to every lieutenant.&#10;2. For every i, let v(i) be the opinion the ith lieutenant gets from the commander or the default value if he gets no message. The ith lieutenant acts as the commander in the next, OM(m-1), turn and sends v(i) to the remaining n-2 lieutenants (where n is the number of nodes).&#10;3. The ith lieutenant chooses his opinion by considering the majority of opinions from v(1) to v(n-1)." wrapText="true">
    </TextArea>
</TextFlow>
